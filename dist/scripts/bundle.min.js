// wrap in an IIFE to remove variables from global scope
(function() {
	"use strict";

	angular.module("folioGenericApp", ["ui.router", "responsive-images"]) // eslint-disable-line no-undef
		.config(function($stateProvider, $urlRouterProvider, $compileProvider, $locationProvider) {

			$compileProvider.debugInfoEnabled(false);

			$stateProvider
			.state("developer", {
				url: "/developer",
				templateUrl: "templates/main/developer.html",
				controller: "DeveloperController"
			})
			.state("photographer", {
				url: "/photographer",
				templateUrl: "templates/main/photographer.html",
				controller: "PhotographerController"
			})
			.state("demo-photoshoot", {
				url: "/demo-photoshoot",
				templateUrl: "templates/photoshoots/demo-photoshoot.html",
				controller: "PhotographerController"
			})
			.state("demo-project", {
				url: "/demo-project",
				templateUrl: "templates/projects/demo-project.html",
				controller: "DeveloperController"
			})
			.state("demo-project-two", {
				url: "/demo-project-two",
				templateUrl: "templates/projects/demo-project-two.html",
				controller: "DeveloperController"
			});

			$urlRouterProvider.otherwise("/developer");

			/* Uncomment the below, as well as the base href in index.html, to use HTML5 pathing
			(without the /#/) on your particular webpage */
			// $locationProvider.html5Mode({
			// 	enabled: true,
			// 	requireBase: true
			// });
		});
})();

(function () {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioGenericApp")
    .controller("DeveloperController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function ($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "developer";

        // utility function for linking between views
        $scope.go = function (path) {
          $location.path(path);
        };

        // page specific objects
        $scope.developerHeadshot = {
          url: "dist/images/developer/headshot-dev.png",
          alt: "developer headshot"
        };

        $scope.ghostButtonLink = {
          url: "#"
        };

        $scope.projectSectionHeaderText = "Selection of Projects";
        $scope.presentationSectionHeaderText = "Talks and Presentations";

        $scope.fabButtonLinks = {
          email: "#",
          file: "#",
          github: "#",
          linkedin: "#"
        };

        // utility function to add active css class to target element
        $scope.activate = function (event) {
          $(event.target).addClass("active"); // eslint-disable-line no-undef
        };

        // utility function to set viewport to the top of the page
        // on element click
        $scope.backToTop = function () {
          $anchorScroll();
        };

        // initialize FAB
        var elem = document.querySelector(".fixed-action-btn");

        var instance = M.FloatingActionButton.init(elem, {
          direction: "left",
          hoverEnabled: false
        });

        // initialize blog container wrapper style
        var secondaryThemeHexCode = '#ffab40';

        if (document.querySelector('div.container.blog-container')) {
          document.body.parentNode.style.boxShadow = "0 0 0 5px " + secondaryThemeHexCode + " inset";
        } else {
          document.body.parentNode.style.boxShadow = '';
        }
      }
    ]);
})();

(function() {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioGenericApp")
    .controller("PhotographerController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "photographer";

        // page specific objects
        $scope.photographerHeadshot = {
          url: "dist/images/photographer/headshot-photo.png",
          alt: "photographer headshot"
        };

        $scope.ghostButtonLink = {
          url: "#"
        };

        $scope.photoSelectionHeaderText = "Selection of Photos";
        $scope.photoShootHeaderText = "Photo Shoots";

        // image data array
        $scope.images = [
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-one.jpg",
            alt: "Demo Photo One"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-two.jpg",
            alt: "Demo Photo Two"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-three.jpeg",
            alt: "Demo Photo Three"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-four.jpeg",
            alt: "Demo Photo Four"
          }
        ];

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // utility function to set viewport to the top of the page on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };
      }
    ]);
})();

(function() {
  "use strict";

  var app = angular.module("responsive-images", []); // eslint-disable-line no-undef

  // UI element directive
  app.directive("responsiveImage", function($timeout) {
    return {
      restrict: "E",
      templateUrl: "responsive-image.html",
      // https://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished
      link: function(scope, element, attr) {
        if (scope.$last === true) {
          $timeout(function() {
            // initialize materialbox
            var elem = document.querySelectorAll(".materialboxed");
            var instance = M.Materialbox.init(elem, {
              inDuration: 275,
              outDuration: 200
            });
          });
        }
      }
    };
  });
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
