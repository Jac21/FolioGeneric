// wrap in an IIFE to remove variables from global scope
(function() {
  "use strict";

  angular
    .module("folioGenericApp", ["ui.router", "responsive-images"]) // eslint-disable-line no-undef
    .config(function(
      $stateProvider,
      $urlRouterProvider,
      $compileProvider,
      $locationProvider
    ) {
      $compileProvider.debugInfoEnabled(false);

      $stateProvider
        .state("developer", {
          url: "/developer",
          templateUrl: "templates/main/developer.html",
          controller: "DeveloperController"
        })
        .state("photographer", {
          url: "/photographer",
          templateUrl: "templates/main/photographer.html",
          controller: "PhotographerController"
        })
        .state("demo-photoshoot", {
          url: "/demo-photoshoot",
          templateUrl: "templates/photoshoots/demo-photoshoot.html",
          controller: "PhotographerController"
        })
        .state("demo-project", {
          url: "/demo-project",
          templateUrl: "templates/projects/demo-project.html",
          controller: "DeveloperController"
        })
        .state("demo-project-two", {
          url: "/demo-project-two",
          templateUrl: "templates/projects/demo-project-two.html",
          controller: "DeveloperController"
        });

      $urlRouterProvider.otherwise("/developer");

      /* Uncomment the below, as well as the base href in index.html, to use HTML5 pathing
			(without the /#/) on your particular webpage */
      // $locationProvider.html5Mode({
      // 	enabled: true,
      // 	requireBase: true
      // });
    });
})();

(function () {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioGenericApp")
    .controller("DeveloperController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function ($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "developer";

        // utility function for linking between views
        $scope.go = function (path) {
          $location.path(path);
        };

        // page specific objects
        $scope.developerHeadshot = {
          url: "dist/images/developer/headshot-dev.png",
          alt: "developer headshot"
        };

        $scope.ghostButtonLink = {
          url: "#"
        };

        $scope.projectSectionHeaderText = "Selection of Projects";
        $scope.presentationSectionHeaderText = "Talks and Presentations";

        $scope.fabButtonLinks = {
          email: "#",
          file: "#",
          github: "#",
          linkedin: "#"
        };

        // utility function to add active css class to target element
        $scope.activate = function (event) {
          $(event.target).addClass("active"); // eslint-disable-line no-undef
        };

        // utility function to set viewport to the top of the page
        // on element click
        $scope.backToTop = function () {
          $anchorScroll();
        };

        // initialize FAB
        var elem = document.querySelector(".fixed-action-btn");

        var instance = M.FloatingActionButton.init(elem, {
          direction: "left",
          hoverEnabled: false
        });

        // initialize materialbox
        var elem = document.querySelectorAll(".materialboxed");
        var instance = M.Materialbox.init(elem, {
          inDuration: 275,
          outDuration: 200
        });

        // initialize blog container wrapper style
        var secondaryThemeHexCode = "#ffab40";

        if (document.querySelector("div.container.blog-container")) {
          document.body.parentNode.style.boxShadow =
            "0 0 0 5px " + secondaryThemeHexCode + " inset";
        } else {
          document.body.parentNode.style.boxShadow = "";
        }
      }
    ]);
})();

(function() {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioGenericApp")
    .controller("PhotographerController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "photographer";

        // page specific objects
        $scope.photographerHeadshot = {
          url: "dist/images/photographer/headshot-photo.png",
          alt: "photographer headshot"
        };

        $scope.ghostButtonLink = {
          url: "#"
        };

        $scope.photoSelectionHeaderText = "Selection of Photos";
        $scope.photoShootHeaderText = "Photo Shoots";

        // image data array
        $scope.images = [
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-one.jpg",
            alt: "Demo Photo One"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-two.jpg",
            alt: "Demo Photo Two"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-three.jpeg",
            alt: "Demo Photo Three"
          },
          {
            caption: "Demo Photo",
            url: "dist/images/photographer/photos/demo-photo-four.jpeg",
            alt: "Demo Photo Four"
          }
        ];

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // utility function to set viewport to the top of the page on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };
      }
    ]);
})();

(function() {
  "use strict";

  var app = angular.module("responsive-images", []); // eslint-disable-line no-undef

  // UI element directive
  app.directive("responsiveImage", function($timeout) {
    return {
      restrict: "E",
      templateUrl: "responsive-image.html",
      // https://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished
      link: function(scope, element, attr) {
        if (scope.$last === true) {
          $timeout(function() {
            // initialize materialbox
            var elem = document.querySelectorAll(".materialboxed");
            var instance = M.Materialbox.init(elem, {
              inDuration: 275,
              outDuration: 200
            });
          });
        }
      }
    };
  });
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkRldmVsb3BlckNvbnRyb2xsZXIuanMiLCJQaG90b2dyYXBoZXJDb250cm9sbGVyLmpzIiwicmVzcG9uc2l2ZUltYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gd3JhcCBpbiBhbiBJSUZFIHRvIHJlbW92ZSB2YXJpYWJsZXMgZnJvbSBnbG9iYWwgc2NvcGVcclxuKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKFwiZm9saW9HZW5lcmljQXBwXCIsIFtcInVpLnJvdXRlclwiLCBcInJlc3BvbnNpdmUtaW1hZ2VzXCJdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXHJcbiAgICAuY29uZmlnKGZ1bmN0aW9uKFxyXG4gICAgICAkc3RhdGVQcm92aWRlcixcclxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLFxyXG4gICAgICAkY29tcGlsZVByb3ZpZGVyLFxyXG4gICAgICAkbG9jYXRpb25Qcm92aWRlclxyXG4gICAgKSB7XHJcbiAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSk7XHJcblxyXG4gICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZShcImRldmVsb3BlclwiLCB7XHJcbiAgICAgICAgICB1cmw6IFwiL2RldmVsb3BlclwiLFxyXG4gICAgICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21haW4vZGV2ZWxvcGVyLmh0bWxcIixcclxuICAgICAgICAgIGNvbnRyb2xsZXI6IFwiRGV2ZWxvcGVyQ29udHJvbGxlclwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJwaG90b2dyYXBoZXJcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi9waG90b2dyYXBoZXJcIixcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9tYWluL3Bob3RvZ3JhcGhlci5odG1sXCIsXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBcIlBob3RvZ3JhcGhlckNvbnRyb2xsZXJcIlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiZGVtby1waG90b3Nob290XCIsIHtcclxuICAgICAgICAgIHVybDogXCIvZGVtby1waG90b3Nob290XCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvcGhvdG9zaG9vdHMvZGVtby1waG90b3Nob290Lmh0bWxcIixcclxuICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUGhvdG9ncmFwaGVyQ29udHJvbGxlclwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJkZW1vLXByb2plY3RcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi9kZW1vLXByb2plY3RcIixcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9wcm9qZWN0cy9kZW1vLXByb2plY3QuaHRtbFwiLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogXCJEZXZlbG9wZXJDb250cm9sbGVyXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcImRlbW8tcHJvamVjdC10d29cIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi9kZW1vLXByb2plY3QtdHdvXCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvcHJvamVjdHMvZGVtby1wcm9qZWN0LXR3by5odG1sXCIsXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBcIkRldmVsb3BlckNvbnRyb2xsZXJcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9kZXZlbG9wZXJcIik7XHJcblxyXG4gICAgICAvKiBVbmNvbW1lbnQgdGhlIGJlbG93LCBhcyB3ZWxsIGFzIHRoZSBiYXNlIGhyZWYgaW4gaW5kZXguaHRtbCwgdG8gdXNlIEhUTUw1IHBhdGhpbmdcclxuXHRcdFx0KHdpdGhvdXQgdGhlIC8jLykgb24geW91ciBwYXJ0aWN1bGFyIHdlYnBhZ2UgKi9cclxuICAgICAgLy8gJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgLy8gXHRlbmFibGVkOiB0cnVlLFxyXG4gICAgICAvLyBcdHJlcXVpcmVCYXNlOiB0cnVlXHJcbiAgICAgIC8vIH0pO1xyXG4gICAgfSk7XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIGFuZ3VsYXIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG4gICAgLm1vZHVsZShcImZvbGlvR2VuZXJpY0FwcFwiKVxyXG4gICAgLmNvbnRyb2xsZXIoXCJEZXZlbG9wZXJDb250cm9sbGVyXCIsIFtcclxuICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgXCIkbG9jYXRpb25cIixcclxuICAgICAgXCIkYW5jaG9yU2Nyb2xsXCIsXHJcbiAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xyXG4gICAgICAgIC8vIHNldCBwYWdlIGNsYXNzXHJcbiAgICAgICAgJHNjb3BlLnBhZ2VDbGFzcyA9IFwiZGV2ZWxvcGVyXCI7XHJcblxyXG4gICAgICAgIC8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGxpbmtpbmcgYmV0d2VlbiB2aWV3c1xyXG4gICAgICAgICRzY29wZS5nbyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgICAkbG9jYXRpb24ucGF0aChwYXRoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBwYWdlIHNwZWNpZmljIG9iamVjdHNcclxuICAgICAgICAkc2NvcGUuZGV2ZWxvcGVySGVhZHNob3QgPSB7XHJcbiAgICAgICAgICB1cmw6IFwiZGlzdC9pbWFnZXMvZGV2ZWxvcGVyL2hlYWRzaG90LWRldi5wbmdcIixcclxuICAgICAgICAgIGFsdDogXCJkZXZlbG9wZXIgaGVhZHNob3RcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5naG9zdEJ1dHRvbkxpbmsgPSB7XHJcbiAgICAgICAgICB1cmw6IFwiI1wiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnByb2plY3RTZWN0aW9uSGVhZGVyVGV4dCA9IFwiU2VsZWN0aW9uIG9mIFByb2plY3RzXCI7XHJcbiAgICAgICAgJHNjb3BlLnByZXNlbnRhdGlvblNlY3Rpb25IZWFkZXJUZXh0ID0gXCJUYWxrcyBhbmQgUHJlc2VudGF0aW9uc1wiO1xyXG5cclxuICAgICAgICAkc2NvcGUuZmFiQnV0dG9uTGlua3MgPSB7XHJcbiAgICAgICAgICBlbWFpbDogXCIjXCIsXHJcbiAgICAgICAgICBmaWxlOiBcIiNcIixcclxuICAgICAgICAgIGdpdGh1YjogXCIjXCIsXHJcbiAgICAgICAgICBsaW5rZWRpbjogXCIjXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB1dGlsaXR5IGZ1bmN0aW9uIHRvIGFkZCBhY3RpdmUgY3NzIGNsYXNzIHRvIHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgJHNjb3BlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB1dGlsaXR5IGZ1bmN0aW9uIHRvIHNldCB2aWV3cG9ydCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXHJcbiAgICAgICAgLy8gb24gZWxlbWVudCBjbGlja1xyXG4gICAgICAgICRzY29wZS5iYWNrVG9Ub3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBGQUJcclxuICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZml4ZWQtYWN0aW9uLWJ0blwiKTtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gTS5GbG9hdGluZ0FjdGlvbkJ1dHRvbi5pbml0KGVsZW0sIHtcclxuICAgICAgICAgIGRpcmVjdGlvbjogXCJsZWZ0XCIsXHJcbiAgICAgICAgICBob3ZlckVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGluaXRpYWxpemUgbWF0ZXJpYWxib3hcclxuICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWF0ZXJpYWxib3hlZFwiKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBNLk1hdGVyaWFsYm94LmluaXQoZWxlbSwge1xyXG4gICAgICAgICAgaW5EdXJhdGlvbjogMjc1LFxyXG4gICAgICAgICAgb3V0RHVyYXRpb246IDIwMFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBpbml0aWFsaXplIGJsb2cgY29udGFpbmVyIHdyYXBwZXIgc3R5bGVcclxuICAgICAgICB2YXIgc2Vjb25kYXJ5VGhlbWVIZXhDb2RlID0gXCIjZmZhYjQwXCI7XHJcblxyXG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LmNvbnRhaW5lci5ibG9nLWNvbnRhaW5lclwiKSkge1xyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnN0eWxlLmJveFNoYWRvdyA9XHJcbiAgICAgICAgICAgIFwiMCAwIDAgNXB4IFwiICsgc2Vjb25kYXJ5VGhlbWVIZXhDb2RlICsgXCIgaW5zZXRcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnN0eWxlLmJveFNoYWRvdyA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBdKTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICBhbmd1bGFyIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuICAgIC5tb2R1bGUoXCJmb2xpb0dlbmVyaWNBcHBcIilcclxuICAgIC5jb250cm9sbGVyKFwiUGhvdG9ncmFwaGVyQ29udHJvbGxlclwiLCBbXHJcbiAgICAgIFwiJHNjb3BlXCIsXHJcbiAgICAgIFwiJGxvY2F0aW9uXCIsXHJcbiAgICAgIFwiJGFuY2hvclNjcm9sbFwiLFxyXG4gICAgICBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xyXG4gICAgICAgIC8vIHNldCBwYWdlIGNsYXNzXHJcbiAgICAgICAgJHNjb3BlLnBhZ2VDbGFzcyA9IFwicGhvdG9ncmFwaGVyXCI7XHJcblxyXG4gICAgICAgIC8vIHBhZ2Ugc3BlY2lmaWMgb2JqZWN0c1xyXG4gICAgICAgICRzY29wZS5waG90b2dyYXBoZXJIZWFkc2hvdCA9IHtcclxuICAgICAgICAgIHVybDogXCJkaXN0L2ltYWdlcy9waG90b2dyYXBoZXIvaGVhZHNob3QtcGhvdG8ucG5nXCIsXHJcbiAgICAgICAgICBhbHQ6IFwicGhvdG9ncmFwaGVyIGhlYWRzaG90XCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZ2hvc3RCdXR0b25MaW5rID0ge1xyXG4gICAgICAgICAgdXJsOiBcIiNcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5waG90b1NlbGVjdGlvbkhlYWRlclRleHQgPSBcIlNlbGVjdGlvbiBvZiBQaG90b3NcIjtcclxuICAgICAgICAkc2NvcGUucGhvdG9TaG9vdEhlYWRlclRleHQgPSBcIlBob3RvIFNob290c1wiO1xyXG5cclxuICAgICAgICAvLyBpbWFnZSBkYXRhIGFycmF5XHJcbiAgICAgICAgJHNjb3BlLmltYWdlcyA9IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogXCJEZW1vIFBob3RvXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJkaXN0L2ltYWdlcy9waG90b2dyYXBoZXIvcGhvdG9zL2RlbW8tcGhvdG8tb25lLmpwZ1wiLFxyXG4gICAgICAgICAgICBhbHQ6IFwiRGVtbyBQaG90byBPbmVcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogXCJEZW1vIFBob3RvXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJkaXN0L2ltYWdlcy9waG90b2dyYXBoZXIvcGhvdG9zL2RlbW8tcGhvdG8tdHdvLmpwZ1wiLFxyXG4gICAgICAgICAgICBhbHQ6IFwiRGVtbyBQaG90byBUd29cIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogXCJEZW1vIFBob3RvXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJkaXN0L2ltYWdlcy9waG90b2dyYXBoZXIvcGhvdG9zL2RlbW8tcGhvdG8tdGhyZWUuanBlZ1wiLFxyXG4gICAgICAgICAgICBhbHQ6IFwiRGVtbyBQaG90byBUaHJlZVwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjYXB0aW9uOiBcIkRlbW8gUGhvdG9cIixcclxuICAgICAgICAgICAgdXJsOiBcImRpc3QvaW1hZ2VzL3Bob3RvZ3JhcGhlci9waG90b3MvZGVtby1waG90by1mb3VyLmpwZWdcIixcclxuICAgICAgICAgICAgYWx0OiBcIkRlbW8gUGhvdG8gRm91clwiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgLy8gdXRpbGl0eSBmdW5jdGlvbiBmb3IgbGlua2luZyBiZXR3ZWVuIHZpZXdzXHJcbiAgICAgICAgJHNjb3BlLmdvID0gZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgICAgICAgJGxvY2F0aW9uLnBhdGgocGF0aCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gdXRpbGl0eSBmdW5jdGlvbiB0byBzZXQgdmlld3BvcnQgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZSBvbiBlbGVtZW50IGNsaWNrXHJcbiAgICAgICAgJHNjb3BlLmJhY2tUb1RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIF0pO1xyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcInJlc3BvbnNpdmUtaW1hZ2VzXCIsIFtdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG5cclxuICAvLyBVSSBlbGVtZW50IGRpcmVjdGl2ZVxyXG4gIGFwcC5kaXJlY3RpdmUoXCJyZXNwb25zaXZlSW1hZ2VcIiwgZnVuY3Rpb24oJHRpbWVvdXQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiBcIkVcIixcclxuICAgICAgdGVtcGxhdGVVcmw6IFwicmVzcG9uc2l2ZS1pbWFnZS5odG1sXCIsXHJcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE1MjA3Nzg4L2NhbGxpbmctYS1mdW5jdGlvbi13aGVuLW5nLXJlcGVhdC1oYXMtZmluaXNoZWRcclxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICBpZiAoc2NvcGUuJGxhc3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIG1hdGVyaWFsYm94XHJcbiAgICAgICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tYXRlcmlhbGJveGVkXCIpO1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBNLk1hdGVyaWFsYm94LmluaXQoZWxlbSwge1xyXG4gICAgICAgICAgICAgIGluRHVyYXRpb246IDI3NSxcclxuICAgICAgICAgICAgICBvdXREdXJhdGlvbjogMjAwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG59KSgpO1xyXG4iXX0=
